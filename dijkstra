#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<vector>
#include<string>
#include<queue>
#include<stack>
#include<iostream>
#include<functional>
#include<algorithm>
#include<utility>
#include<limits.h>
#include<set>
#include<map>
#define mk make_pair
using namespace std;
typedef unsigned long long ull;
typedef long long ll;
typedef pair<int, int> pii;

/*
    n 개의 노드가 있을 때 dist[1~n] 은 각각의 노드에서 출발했을 때 최소비용을 저장하고 있음
*/

vector<vector<pii> > graph;
vector<vector<int> > dist;
priority_queue<pii> pq;
int n, m, a, b, c;
void dijkstra(int start){
	
	pq.push(mk(start, 0));
	dist[start][start] = 0; 

	while (!pq.empty()){
		int cur = pq.top().first;
		int cost = -pq.top().second; // minheap 만들기 위해 - 붙여줌
		pq.pop();

		if (dist[start][cur] < cost) // 저장된 cur까지의 거리가 cost보다 작으면 다음꺼
			continue;

		for (int i = 0; i < graph[cur].size(); i++){
			int next = graph[cur][i].first;
			int nextcost = graph[cur][i].second + cost;

			if (dist[start][next] > nextcost){
				dist[start][next] = nextcost;
				pq.push(mk(next, -nextcost));
			}
		}
	}
}

int main(){
	scanf("%d %d", &n, &m);
	graph.resize(n + 1);
	dist.resize(n + 1);
	vector<pii> ans;
	for (int i = 0; i < m; i++){
		scanf("%d %d", &a, &b, &c);
		graph[a].push_back(mk(b, c)); // [current][(next, cost)]
	}
	
	for (int i = 1; i <= n; i++){
		dist[i].resize(n + 1, INT_MAX);
		dijkstra(i);
	}
	return 0;
}
