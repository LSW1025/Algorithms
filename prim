#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
using namespace std;
#define MAX 987654321
#define mk make_pair
typedef pair<int, int> pii;

vector<vector<pii> > graph; // pair = cur , (cost, next);
priority_queue<pii> myqueue; // pair = (cost, next);
bool visited[12345];
int V,E,A,B,C;

int prim(int start){
    int costSum = 0;
    int cnt = 0; // edge count

    int cur = start;
    int cost = 0;
    visited[start] = true;

    int next;
    int nextcost;
    for(int i=0;i<graph[cur].size();i++){
        next = graph[cur][i].second;
        nextcost = graph[cur][i].first;

        if(!visited[next])
            myqueue.push(mk(-nextcost, next));
    }


    while(!myqueue.empty()){
        if(cnt == V-1) break; // complete spanning tree

        cur = myqueue.top().second;
        cost = -myqueue.top().first;
        myqueue.pop();
        if(visited[cur]) continue;
        visited[cur] = true;

        for(int i=0;i<graph[cur].size();i++){
            next = graph[cur][i].second;
            nextcost = graph[cur][i].first;

            if(!visited[next])
                myqueue.push(mk(-nextcost, next));
        }
        costSum += cost;
        cnt++;
    }

    return costSum;
}

int main(){
    scanf("%d %d", &V, &E);
    graph.resize(V+1);
    for(int i=0;i<E;i++){
        scanf("%d %d %d", &A,&B,&C);
        graph[A].push_back(mk(C,B));
        graph[B].push_back(mk(C,A));
    }
    printf("%d\n", prim(1));

    return 0;
}
